/* Generated By:JavaCC: Do not edit this line. RelationalQueryLanguage.java */
package br.edu.ifsp.parser;

/*
 * Import session
 */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import br.edu.ifsp.symbolTable.*;
import br.edu.ifsp.syntacticTree.*;
import br.edu.ifsp.syntacticTree.interfaces.*;
import br.edu.ifsp.symbolTable.exceptions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RelationalQueryLanguage implements RelationalQueryLanguageConstants {

        /**
	 * Compiler version describe.
	 */
        public static final String VERSION = "Relational Query Language Translator 1.0 - 2010";

        /**
	 * Attribute used to check if there is or there is not abstract output of syntax analysis.
	 */
        private static boolean debug_sa = false; //debug lexical syntax analysis process

        /**
	 * Attribute used to store the syntactic tree from analysis
	 */
        private static ListNode root = null; //Store the syntactic tree

        /**
	 * Method main of Relational Query Language class
     * @throws IOException 
	 */
        public static void main ( String args[] ) throws ParseException, IOException {

                /**
		 * Attribute used to store a reference of a parser object that will do the compilation of source code in Relational Query Language.
		 */
                RelationalQueryLanguage parser = null;

                /**
		 * Attribute used to store the file name that will be analysis. 
		 */
                String fileName = null;

                /**
		 * Attribute used to store the output path.
		 */
                String outputPath = "./";

                /**
		 * Attribute used to store the output file name.
		 */
                String outputFileName;

                /**
		 * Number of parameters errors.
		 */
                int parametersErrors = 0;

                /**
		 * For clause used to get the parameters that will be used in compiler process.
		 */
                for ( int i = 0; i < args.length && parametersErrors == 0; i++ ) { //for 1

                        String arg = args[i];

                        if ( arg.toLowerCase().equals( "--debug-syntax-analysis" ) || arg.toLowerCase().equals( "-s" ) ) {

                                debug_sa = true;
                        }
                        /*
			 * Checking help parameter
			 */
                        else if ( arg.equals( "--help " ) || arg.equals( "-h" ) ) {

                                helpText();
                                System.exit( 0 );
                        }
                        /*
			 * Checking attributes parameter
			 */
                        else if (arg.equals("--attributes-definition") || arg.equals("-a")) {
                                i = checkParameterOfAttributesDefinition(args, i)-1;
                                if (i == 0) {
                                        helpText();
                                        System.exit(0);
                                }
                        }
                        /*
			 * Checking output-path parameter
			 */
                        else if ( arg.toLowerCase().equals( "--output-path" ) || arg.toLowerCase().equals( "-p" ) ) {

                                if ( i + 1 < args.length && checkParameterOfOutputPath( args[i+1] ) )
                                        outputPath = args[++i];
                                else {

                                        System.out.println( "The value of --output-path parameter is invalid." );
                                        parametersErrors++;
                                }
                        }
                        /*
			 * Checking output name parameter
			 */
                        else if ( arg.toLowerCase().equals( "--output-name" ) || arg.toLowerCase().equals( "-n" ) ) {

                                if ( i + 1 < args.length && checkParameterOfOutputName( args[i+1] ) )
                                        outputFileName = args[++i];

                                else {

                                        System.out.print( "The value of output-name parameter is invalid." );
                                        parametersErrors++;
                                }
                        }
                        /*
			 * Checking target SQL parameter.
			 */
                        else if ( arg.toLowerCase().equals( "--target-sql" ) || arg.toLowerCase().equals( "-t" ) ) {

                                if ( i + 1 < args.length && checkParameterOfTargetSQL( args[i+1] ) ) i++;

                                else {

                                        System.out.print( "The value of output-name parameter is invalid. It's just possible to use the SQL92 option." );
                                        parametersErrors++;
                                }
                        }
                        /*
			 * Checking if the file is in the last index. 
			 */
                        else if ( i != args.length - 1 ) {

                                parametersErrors++;
                        }
                        /*
			 * All right. Now we go to do the compilation. 	
			 */
                        else
                                fileName = arg;
                } //for 1

                if ( parametersErrors != 0 ) {

                        System.out.println();
                        helpText();
                        System.exit(0);
                }
                else {

                        System.out.printf( "Reading from file %s\u005cn", fileName );

                        try {

                                parser = new RelationalQueryLanguage( new FileInputStream( fileName ) );

                                /*
				 * Disabling/Enabling the syntax analysis debug
				 */
                                if ( !debug_sa )
                                        parser.disable_tracing();
                                else
                                        parser.enable_tracing();
                        }
                        catch ( FileNotFoundException exception ) {

                                System.out.printf( "File %s not found.\u005cn", fileName );
                                System.exit(0);
                        }

                        try {

                                root = parser.program();
                                PrintTree pt = new PrintTree();
                                pt.printRoot(root);
                                pt.exportDotTree(root);

                        }
                        catch ( NullPointerException exception ) {

                                System.out.println( "A file must be specified." );
                        }
                        finally {


                                switch ( parser.token_source.foundLexError() )  {
                                        case 0:
                                                System.out.println( "Lexical errors were not found." );
                                           break;

                                        case 1:
                                                System.out.printf( "%c[1m%i%c[0m lexical error was found.\u005cn", 27, 1, 27 );
                                          break;

                                        default:
                                                System.out.printf( "%c[1m%i%c[0m lexical errors were found.\u005cn", 27, parser.token_source.foundLexError(), 27 );
                                }

                                System.out.println( "Analysis finished." );
                        }
                }

        }//main

        /**
	 * Method used to link a founded token with his name.
	 * @see the book DELAMARO, M. E. Como Construir um Compilador: Utilizando Ferramentas Java. São Paulo: Novatec. 2004
	 * @param x
	 * @return
	 */
        public static String im ( int x ) {

                int k;
                String s;

                s = tokenImage[x];
                k = s.lastIndexOf( "\u005c"" );

                try {

                        s.substring( 1, k );
                }
                catch( Exception exception ) {}

                return s;
        }

        /**
	 * Method used to print the help text.
	 */
        private static void helpText() {

                System.out.println( "Usage: java -jar rql.jar [options] file" );
                System.out.println();

                System.out.println( "[options]" );

                System.out.printf( "%c[1m", 27 );
                System.out.println( String.format( "\u005cn\u005ct\u00b7   %-30s", "-p, --output-path <path-name>" ) );
                System.out.printf( "%c[0m", 27 );
                System.out.println( String.format( "\u005cn\u005ct    %s", "Specific output path" ) );

                System.out.printf( "%c[1m", 27 );
                System.out.println( String.format( "\u005cn\u005ct\u00b7   %-30s", "-n, --output-name <file-name>" ) );
                System.out.printf( "%c[0m", 27 );
                System.out.println( String.format( "\u005cn\u005ct    %s", "Specific output file name" ) );

                System.out.printf( "%c[1m", 27 );
                System.out.println( String.format( "\u005cn\u005ct\u00b7   %-30s", "-t, --target-sql <sql-type>",   "Target sql type (default: SQL92)" ) );
                System.out.printf( "%c[0m", 27 );
                System.out.println( String.format( "\u005cn\u005ct    %s", "Target sql type (default: SQL92)" ) );

                System.out.printf( "%c[1m", 27 );
                System.out.println( String.format( "\u005cn\u005ct\u00b7   %-30s", "-l, --debug-lexical-analysis" ) );
                System.out.printf( "%c[0m", 27 );
                System.out.println( String.format( "\u005cn\u005ct    %s", "Show lexical analysis details." ) );

                System.out.printf( "%c[1m", 27 );
                System.out.println( String.format( "\u005cn\u005ct\u00b7   %-30s", "-s, --debug-syntax-analysis" ) );
                System.out.printf( "%c[0m", 27 );
                System.out.println( String.format( "\u005cn\u005ct    %s", "Show syntax analysis details." ) );

                System.out.println();
        }

        /**
	 * Method used to check the parameter value of --attributes-definition.
	 * @param location
	 *            is the start of parameters definition.
	 * @return the position of the next argument
	 */
        public static int checkParameterOfAttributesDefinition(String args[], int location) {

                boolean result = false;
                List<String> attributes = new ArrayList<String>();
                String attributeCheck = "";
                String identifierRegex = "([a-zA-Z_][a-zA-Z1-9_]*)";
                String typeRegex = "(VARCHAR|CHAR|INT|INTEGER|DOUBLE|DECIMAL|RATIONAL|FLOAT|LONG|BLOB)(\u005c\u005c([1-9]{1,3}\u005c\u005c))?";
                String primaryRegex = "(PRIMARY\u005c\u005cs?KEY)?";
                String foreignRegex = "(REFERENCES\u005c\u005cs?" + identifierRegex + "." + identifierRegex + ")?";
                String attributeRegex = identifierRegex + "." + identifierRegex + ":" + typeRegex + primaryRegex + foreignRegex
                                + ";";

                for (int i = location + 1; i < args.length - 1; i++) {
                        String parameter = args[i];
                        if (!parameter.equals("-p") && !parameter.equals("--output-path") && !parameter.equals("-n")
                                        && !parameter.equals("--output-name") && !parameter.equals("-t")
                                        && !parameter.equals("--target-sql") && !parameter.equals("-l")
                                        && !parameter.equals("--debug-lexical-analysis") && !parameter.equals("-s")
                                        && !parameter.equals("--debug-syntax-analysis") && !parameter.equals("-h")
                                        && !parameter.equals("--help")) {
                                attributes.add(parameter);
                                attributeCheck += parameter;
                        } else {
                                location = i;
                                break;
                        }

                }
                if (!attributeCheck.matches("(" + attributeRegex + ")+")) {
                        return 0;
                } else {
                        System.out.println("Building symbol table from arguments:");
                        buildSymbolTable(attributeCheck, attributeRegex);
                }
                return location;
        }

        /**
	 * Method used to build the symbol table from arguments.
	 * @param definition
	 *            is the string with the information about the database
	 * @param regex
	 * 				is the regular expression that check the information
	 */
        public static void buildSymbolTable(String definition, String regex) {
                Pattern pattern = Pattern.compile(regex);
                Matcher matcher = pattern.matcher(definition);

                SymbolTable st = new SymbolTable();
                while (matcher.find()) {
                        String relation = matcher.group(1);
                        String attribute = matcher.group(2);
                        String type = matcher.group(3);

                        Attribute newAttribute = new Attribute(attribute, type);

                        int range = 0;
                        if (matcher.group(4) != null) {
                                range = Integer.parseInt(matcher.group(4).replace("(", "").replace(")", ""));
                                newAttribute.addFeature("range", range);
                        }

                        boolean primary = false;
                        if (matcher.group(5) != null) {
                                primary = true;
                                newAttribute.addFeature("primary", primary);
                        }

                        String referenceRelation = matcher.group(7);
                        String referenceAttribute = matcher.group(8);

                        if (referenceRelation != null) {
                                // Checks the foreign key
                                if (st.hasRelation(referenceRelation)
                                                && st.getRelation(referenceRelation).hasAttribute(referenceAttribute)) {
                                        newAttribute.addFeature("reference", new Reference(referenceRelation, referenceAttribute));
                                } else {
                                        // Throw a exception for unexistent foreign key
                                        throw new UnexistentForeignKeyException();
                                }
                        }

                        System.out.println("  Making a new entry:");
                        System.out.println("    Relation: " + relation);
                        System.out.println("    Attribute: " + attribute);
                        System.out.println("    Type: " + type);
                        System.out.println("    Range: " + range);
                        System.out.println("    Primary: " + primary);
                        System.out.println("    Reference relation: " + referenceRelation);
                        System.out.println("    Reference attribute: " + referenceAttribute);
                        System.out.println("  Closing entry:");

                        st.getRelation(relation).addAttribute(attribute, newAttribute);
                }
                System.out.println("Finished the construction of the symbol table");
        }

        /**
	 * Method used to check if the parameter value of --output-path, --output-name and target-sql are not equals compiler parameters .
	 * @param parameter is the value will be checked.
	 * @return true if the value that's OK
	 */
        public static boolean checkParameter ( String parameter ) {

                boolean result = false;

                if (
                        !parameter.equals( "-p" ) && !parameter.equals( "--output-path" )                    &&
                        !parameter.equals( "-n" ) && !parameter.equals( "--output-name" )                    &&
                        !parameter.equals( "-t" ) && !parameter.equals( "--target-sql" )                     &&
                        !parameter.equals( "-l" ) && !parameter.equals( "--debug-lexical-analysis" )         &&
                        !parameter.equals( "-s" ) && !parameter.equals( "--debug-syntax-analysis"  )         &&
                        !parameter.equals( "-h" ) && !parameter.equals( "--help" )

                ) {

                        result = true;
                }

                return result;
        }

        /**
	 * Method used to check the parameter value of --output-name.
	 * @param parameter is the value will be checked.
	 * @return true if the value that's OK
	 */
        public static boolean checkParameterOfOutputName (String parameter ) {

                boolean result = false;

                if ( parameter != null && checkParameter( parameter ) )
                        result = true;

                return result;
        }

        /**
	 * Method used to check the parameter value of --output-path.
	 * @param parameter is the value will be checked.
	 * @return true if the value that's OK
	 */
        public static boolean checkParameterOfOutputPath ( String parameter ) {

                boolean result = false;

                if ( parameter.indexOf( "-" ) != 0 && parameter != null && checkParameter( parameter ) )
                        result = true;

                return result;
        }

        /**
	 * Method used to check the parameter value of --target-sql.
	 * @param parameter is the value will be checked.
	 * @return true if the value that's OK
	 */
        public static boolean checkParameterOfTargetSQL ( String parameter ) {

                boolean result = false;

                if ( parameter.toUpperCase().equals( "SQL92" ) )
                        result = true;

                return result;
        }

/* **************************************************************************************************************
/*                                                Syntax Definition 											*
/* **************************************************************************************************************/
  final public ListNode program() throws ParseException {
    trace_call("program");
    try {
   RelationalOperationsNode r = null;
   ListNode l = null;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PARENTHESIS:
        case PROJECT_TOKEN:
        case SELECT_TOKEN:
        case RENAME_TOKEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        r = relationalOperations();
        jj_consume_token(SEMICOLON);
              if ( l == null ) l = new ListNode( r );
              else l.add( r );
      }
      jj_consume_token(0);
          {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

  final public RelationalOperationsNode relationalOperations() throws ParseException {
    trace_call("relationalOperations");
    try {
   RelationalOperationsNodeChildren opnd = null;
      opnd = query();
     {if (true) return new RelationalOperationsNode( (QueryNode) opnd );}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("relationalOperations");
    }
  }

  final public QueryNode query() throws ParseException {
    trace_call("query");
    try {
   QueryNodeChildren qnc = null;
      qnc = readyOnlyOperations();
          {if (true) return new QueryNode( qnc );}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("query");
    }
  }

  final public ReadyOnlyOperationsNode readyOnlyOperations() throws ParseException {
    trace_call("readyOnlyOperations");
    try {
        ReadyOnlyOperationsNodeChildren roonc = null;
      roonc = unitaryOperations();
          {if (true) return new ReadyOnlyOperationsNode(roonc);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("readyOnlyOperations");
    }
  }

  final public UnitaryOperationsNode unitaryOperations() throws ParseException {
    trace_call("unitaryOperations");
    try {
        UnitaryOperationsNodeChildren uonc = null;
        ListNode ln = null;
        ReadyOnlyOperationsNode roon = null;
        RelationNode rn = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PARENTHESIS:
      case PROJECT_TOKEN:
      case SELECT_TOKEN:
      case RENAME_TOKEN:
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROJECT_TOKEN:
          case SELECT_TOKEN:
          case RENAME_TOKEN:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROJECT_TOKEN:
            uonc = project();
          if ( uonc != null ) {
                if ( ln == null ) ln = new ListNode( (Node) uonc );
                else ln.add( (Node) uonc );
          }
            break;
          case SELECT_TOKEN:
            uonc = select();
          if ( uonc != null ) {
                if ( ln == null ) ln = new ListNode( (Node) uonc );
                else ln.add( (Node) uonc );
          }
            break;
          case RENAME_TOKEN:
            uonc = rename();
          if ( uonc != null ) {
                if ( ln == null ) ln = new ListNode( (Node) uonc );
                else ln.add( (Node) uonc );
          }
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LEFT_PARENTHESIS);
        roon = readyOnlyOperations();
        jj_consume_token(RIGHT_PARENTHESIS);
                                                                                {if (true) return new UnitaryOperationsNode(ln, roon);}
        break;
      case IDENTIFIER:
        rn = relation();
                            if ( rn != null ) {if (true) return new UnitaryOperationsNode( rn );}
          else {if (true) return new UnitaryOperationsNode( ln, roon );}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unitaryOperations");
    }
  }

  final public ProjectNode project() throws ParseException {
    trace_call("project");
    try {
        ListNode ln = null;
        Token token = null;
      jj_consume_token(PROJECT_TOKEN);
      token = jj_consume_token(IDENTIFIER);
          ln = new ListNode( new AttributeNode( token ) );
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        token = jj_consume_token(IDENTIFIER);
           ln.add( new AttributeNode( token ) );
      }
          {if (true) return new ProjectNode(ln);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("project");
    }
  }

  final public SelectNode select() throws ParseException {
    trace_call("select");
    try {
        Token temporario = null;
      temporario = jj_consume_token(SELECT_TOKEN);
     {if (true) return new SelectNode(temporario);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("select");
    }
  }

  final public RenameNode rename() throws ParseException {
    trace_call("rename");
    try {
        ListNode ln = null;
        Token t1 = null, t2 = null;
      jj_consume_token(RENAME_TOKEN);
      t1 = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(IDENTIFIER);
     if(ln==null) ln = new ListNode( new RenameSetNode(t1, t2) );
        else ln.add( new RenameSetNode(t1, t2) );
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        t1 = jj_consume_token(IDENTIFIER);
        t2 = jj_consume_token(IDENTIFIER);
          if(ln==null) ln = new ListNode( new RenameSetNode(t1, t2) );
        else ln.add( new RenameSetNode(t1, t2) );
      }
     {if (true) return new RenameNode(ln);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rename");
    }
  }

  final public RelationNode relation() throws ParseException {
    trace_call("relation");
    try {
        Token t = null;
      t = jj_consume_token(IDENTIFIER);
     {if (true) return new RelationNode(t);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("relation");
    }
  }

  final public void logicalSentence() throws ParseException {
    trace_call("logicalSentence");
    try {
      conditionalSentence();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case XOR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        logicalOperator();
        conditionalSentence();
      }
    } finally {
      trace_return("logicalSentence");
    }
  }

  final public void conditionalSentence() throws ParseException {
    trace_call("conditionalSentence");
    try {
      comparisonSentence();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(IF);
        comparisonSentence();
        jj_consume_token(COLON);
        comparisonSentence();
      }
    } finally {
      trace_return("conditionalSentence");
    }
  }

  final public void comparisonSentence() throws ParseException {
    trace_call("comparisonSentence");
    try {
      instanceofSentence();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS_THAN:
        case EQUALS:
        case NOT_EQUALS:
        case GREATER_THAN:
        case GREATER_THAN_OR_EQUALS:
        case LESS_THAN_OR_EQUALS:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        comparisonOperator();
        instanceofSentence();
      }
    } finally {
      trace_return("comparisonSentence");
    }
  }

  final public void instanceofSentence() throws ParseException {
    trace_call("instanceofSentence");
    try {
      additionSentence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        type();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      trace_return("instanceofSentence");
    }
  }

  final public void additionSentence() throws ParseException {
    trace_call("additionSentence");
    try {
      multiplicationSentence();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
        case MINUS_SIGN:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          jj_consume_token(PLUS_SIGN);
          break;
        case MINUS_SIGN:
          jj_consume_token(MINUS_SIGN);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicationSentence();
      }
    } finally {
      trace_return("additionSentence");
    }
  }

  final public void multiplicationSentence() throws ParseException {
    trace_call("multiplicationSentence");
    try {
      factor();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PERCENT:
        case ASTERISK:
        case SOLIDUS:
        case POWER:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASTERISK:
          jj_consume_token(ASTERISK);
          break;
        case POWER:
          jj_consume_token(POWER);
          break;
        case SOLIDUS:
          jj_consume_token(SOLIDUS);
          break;
        case PERCENT:
          jj_consume_token(PERCENT);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        factor();
      }
    } finally {
      trace_return("multiplicationSentence");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case DECIMAL:
      case HEX:
      case OCT:
      case BIN:
      case STRING:
      case TRUE:
      case FALSE:
        literal();
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case LEFT_PARENTHESIS:
        jj_consume_token(LEFT_PARENTHESIS);
        conditionalSentence();
        jj_consume_token(RIGHT_PARENTHESIS);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void logicalOperator() throws ParseException {
    trace_call("logicalOperator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case XOR:
        jj_consume_token(XOR);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("logicalOperator");
    }
  }

  final public void comparisonOperator() throws ParseException {
    trace_call("comparisonOperator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUALS:
        jj_consume_token(LESS_THAN_OR_EQUALS);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_OR_EQUALS:
        jj_consume_token(GREATER_THAN_OR_EQUALS);
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comparisonOperator");
    }
  }

  final public void literal() throws ParseException {
    trace_call("literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      case HEX:
        jj_consume_token(HEX);
        break;
      case OCT:
        jj_consume_token(OCT);
        break;
      case BIN:
        jj_consume_token(BIN);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("literal");
    }
  }

  final public void type() throws ParseException {
    trace_call("type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARCHAR_TYPE:
        jj_consume_token(VARCHAR_TYPE);
        break;
      case CHAR_TYPE:
        jj_consume_token(CHAR_TYPE);
        break;
      case INTEGER_TYPE:
        jj_consume_token(INTEGER_TYPE);
        break;
      case DOUBLE_TYPE:
        jj_consume_token(DOUBLE_TYPE);
        break;
      case FLOAT_TYPE:
        jj_consume_token(FLOAT_TYPE);
        break;
      case BLOB_TYPE:
        jj_consume_token(BLOB_TYPE);
        break;
      case GEOMETRIC_TYPE:
        jj_consume_token(GEOMETRIC_TYPE);
        break;
      case RELATION_TYPE:
        jj_consume_token(RELATION_TYPE);
        break;
      case BOOLEAN_TYPE:
        jj_consume_token(BOOLEAN_TYPE);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type");
    }
  }

  /** Generated Token Manager. */
  public RelationalQueryLanguageTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x0,0x0,0x200,0x2000,0x2000,0x0,0x0,0x1f80000,0x0,0x5000,0x5000,0x10880,0x10880,0x0,0x200,0x0,0x1f80000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x38,0x38,0x38,0x38,0x0,0x0,0x7000,0x2,0x0,0x1,0x0,0x0,0x4,0x4,0x8000,0xfe000000,0x7000,0x0,0xfe000000,0x1ff0000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x1,0x2,};
   }

  /** Constructor with InputStream. */
  public RelationalQueryLanguage(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelationalQueryLanguage(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelationalQueryLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RelationalQueryLanguage(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelationalQueryLanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RelationalQueryLanguage(RelationalQueryLanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RelationalQueryLanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
