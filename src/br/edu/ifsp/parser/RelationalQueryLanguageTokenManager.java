/* Generated By:JavaCC: Do not edit this line. RelationalQueryLanguageTokenManager.java */
package br.edu.ifsp.parser;
/*
 * Import session
 */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import br.edu.ifsp.symbolTable.*;
import br.edu.ifsp.syntacticTree.*;
import br.edu.ifsp.syntacticTree.interfaces.*;
import br.edu.ifsp.symbolTable.exceptions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Token Manager. */
public class RelationalQueryLanguageTokenManager implements RelationalQueryLanguageConstants
{
        int countLexError = 0;

        public int foundLexError() {

                return countLexError;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1080000L) != 0L)
            return 2;
         if ((active0 & 0x200005000L) != 0L)
            return 164;
         if ((active0 & 0x3207a100L) != 0L || (active1 & 0x490L) != 0L)
            return 63;
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            return 49;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 53;
         }
         if ((active0 & 0x600004000000L) != 0L)
            return 62;
         if ((active0 & 0x40L) != 0L)
            return 165;
         if ((active0 & 0x8000000100000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 62;
         }
         return -1;
      case 1:
         if ((active1 & 0x10L) != 0L)
            return 63;
         if ((active0 & 0x8100400100000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 62;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 166;
         }
         return -1;
      case 2:
         if ((active0 & 0x8100000100000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 62;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 62;
         return -1;
      case 3:
         if ((active0 & 0x8000000000000000L) != 0L)
            return 62;
         if ((active0 & 0x100000100000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 62;
         }
         return -1;
      case 4:
         if ((active0 & 0x100000100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 62;
         }
         if ((active1 & 0x1L) != 0L)
            return 62;
         return -1;
      case 5:
         if ((active0 & 0x100000100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 62;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 62;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 62;
         return -1;
      case 7:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 62;
         }
         return -1;
      case 8:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 62;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 6, 165);
      case 35:
         return jjStopAtPos(0, 39);
      case 36:
         return jjStopAtPos(0, 40);
      case 37:
         return jjStopAtPos(0, 7);
      case 38:
         return jjStartNfaWithStates_0(0, 8, 63);
      case 39:
         return jjStopAtPos(0, 5);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 43:
         return jjStartNfaWithStates_0(0, 12, 164);
      case 44:
         return jjStartNfaWithStates_0(0, 13, 63);
      case 45:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 15, 63);
      case 47:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x490L);
      case 58:
         return jjStartNfaWithStates_0(0, 17, 63);
      case 59:
         return jjStartNfaWithStates_0(0, 18, 63);
      case 60:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 20);
      case 62:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 63:
         return jjStartNfaWithStates_0(0, 25, 63);
      case 64:
         return jjStopAtPos(0, 41);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 28, 63);
      case 93:
         return jjStartNfaWithStates_0(0, 29, 63);
      case 94:
         return jjStopAtPos(0, 44);
      case 95:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 118:
         return jjStartNfaWithStates_0(0, 45, 62);
      case 123:
         return jjStopAtPos(0, 30);
      case 124:
         return jjStopAtPos(0, 27);
      case 125:
         return jjStopAtPos(0, 31);
      case 162:
         return jjStopAtPos(0, 35);
      case 163:
         return jjStopAtPos(0, 36);
      case 167:
         return jjStopAtPos(0, 37);
      case 172:
         return jjStopAtPos(0, 47);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 42:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 47:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 68, 63);
         break;
      case 61:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 95:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 62);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 62);
         break;
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 62);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 62);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xfbffeb73ffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 164;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 1:
                  if ((0x8c00d040ffffc9ffL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(63);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 45)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 165:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(140, 141);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(139);
                  }
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 0:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 2:
                  if (curChar == 62 && kind > 21)
                     kind = 21;
                  break;
               case 3:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 38 && kind > 38)
                     kind = 38;
                  break;
               case 5:
                  if (curChar == 43 && kind > 42)
                     kind = 42;
                  break;
               case 6:
                  if (curChar == 45 && kind > 43)
                     kind = 43;
                  break;
               case 8:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 41 && kind > 48)
                     kind = 48;
                  break;
               case 19:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 41 && kind > 49)
                     kind = 49;
                  break;
               case 27:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(32);
                  break;
               case 41:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(46);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0x8c00d040ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(63);
                  break;
               case 82:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 91:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 103:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 114:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 115:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar == 41 && kind > 50)
                     kind = 50;
                  break;
               case 132:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 138:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(139);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(140, 141);
                  break;
               case 141:
                  if (curChar != 46)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(142);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(142);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(0, 2);
                  break;
               case 144:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 10);
                  break;
               case 145:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 146:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 147:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 148:
                  if ((0x2400L & l) != 0L)
                     kind = 78;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  else if ((0xc000000038000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(63);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 76)
                     jjAddStates(11, 13);
                  else if (curChar == 73)
                     jjAddStates(14, 15);
                  else if (curChar == 77)
                     jjAddStates(16, 18);
                  else if (curChar == 80)
                     jjAddStates(19, 20);
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if (curChar == 68)
                     jjAddStates(21, 24);
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 165:
                  jjCheckNAddTwoStates(147, 148);
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 166:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(62);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  break;
               case 164:
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 7:
                  if (curChar != 82)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 13:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar != 82)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar != 76)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 33:
               case 155:
                  if (curChar == 65)
                     jjCheckNAdd(26);
                  break;
               case 34:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar != 84)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(41);
                  break;
               case 47:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 48:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 66 && kind > 53)
                     kind = 53;
                  break;
               case 52:
               case 129:
                  if (curChar == 79)
                     jjCheckNAdd(51);
                  break;
               case 54:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if ((0x10000000100L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 58:
                  if ((0x800000008000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 60:
                  if ((0x400000004L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0xc000000038000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if (curChar == 80)
                     jjAddStates(19, 20);
                  break;
               case 65:
                  if (curChar == 84 && kind > 54)
                     kind = 54;
                  break;
               case 66:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 78 && kind > 54)
                     kind = 54;
                  break;
               case 70:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 77)
                     jjAddStates(16, 18);
                  break;
               case 76:
                  if (curChar == 83 && kind > 54)
                     kind = 54;
                  break;
               case 77:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 69 && kind > 54)
                     kind = 54;
                  break;
               case 88:
               case 100:
               case 136:
                  if (curChar == 78)
                     jjCheckNAdd(87);
                  break;
               case 89:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 101:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 73)
                     jjAddStates(14, 15);
                  break;
               case 113:
                  if (curChar != 84)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(114);
                  break;
               case 118:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 119:
                  if (curChar != 82)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(114);
                  break;
               case 120:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 76)
                     jjAddStates(11, 13);
                  break;
               case 126:
                  if (curChar != 71)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(41);
                  break;
               case 127:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 130:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 133:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 137:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 145:
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 147:
                  jjCheckNAddTwoStates(147, 148);
                  break;
               case 149:
                  if (curChar == 68)
                     jjAddStates(21, 24);
                  break;
               case 150:
                  if (curChar != 69)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(27);
                  break;
               case 151:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 156:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 69 && kind > 55)
                     kind = 55;
                  break;
               case 161:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 77 && kind > 55)
                     kind = 55;
                  break;
               case 163:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 63:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(63);
                  break;
               case 165:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 145:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(145, 146);
                  break;
               case 147:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 164 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 69);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   139, 140, 141, 139, 140, 55, 57, 145, 146, 147, 148, 128, 135, 137, 118, 124, 
   86, 99, 111, 68, 74, 154, 159, 161, 163, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\47", "\42", "\45", "\46", "\50", "\51", "\52", 
"\53", "\54", "\55", "\56", "\57", "\72", "\73", "\74", "\75", null, "\76", "\76\75", 
"\74\75", "\77", "\137", "\174", "\133", "\135", "\173", "\175", 
"\151\156\163\164\141\156\143\145\157\146", "\55\76", "\52\52", "\242", "\243", "\247", null, "\43", "\44", "\100", null, 
null, "\136", "\166", "\137\166\137", "\254", null, null, null, null, null, null, 
null, null, "\102\117\117\114\105\101\116", null, null, null, null, null, null, 
"\124\122\125\105", "\106\101\114\123\105", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ENDLINE_COMMENT",
   "MULTILINE_COMMENT",
   "DOCUMENTATION_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, 3, 
   0, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x7ff0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x6000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[164];
private final int[] jjstateSet = new int[328];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public RelationalQueryLanguageTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RelationalQueryLanguageTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 164; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 70)
       {
          jjmatchedKind = 70;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 73)
       {
          jjmatchedKind = 73;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 76)
       {
          jjmatchedKind = 76;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 77 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          System.err.printf(
            "Invalid string found from line %d, column %d - %s\u005cn",
                input_stream.getBeginLine(),
                input_stream.getBeginColumn(),
                image
          );

          countLexError++;
         break;
      case 78 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.err.printf(
                "Invalid string found from line %d, column %d - %s\u005cn",
                        input_stream.getBeginLine(),
                        input_stream.getBeginColumn(),
                        image
                );

                countLexError++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
